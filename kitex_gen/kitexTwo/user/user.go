// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package user

import (
	"context"
	"fmt"
)

type CreateUserReq struct {
	Title       string `thrift:"title,1,required" frugal:"1,required,string" json:"title"`
	SendSmsCode string `thrift:"SendSmsCode,2,required" frugal:"2,required,string" json:"SendSmsCode"`
}

func NewCreateUserReq() *CreateUserReq {
	return &CreateUserReq{}
}

func (p *CreateUserReq) InitDefault() {
}

func (p *CreateUserReq) GetTitle() (v string) {
	return p.Title
}

func (p *CreateUserReq) GetSendSmsCode() (v string) {
	return p.SendSmsCode
}
func (p *CreateUserReq) SetTitle(val string) {
	p.Title = val
}
func (p *CreateUserReq) SetSendSmsCode(val string) {
	p.SendSmsCode = val
}

func (p *CreateUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateUserReq(%+v)", *p)
}

var fieldIDToName_CreateUserReq = map[int16]string{
	1: "title",
	2: "SendSmsCode",
}

type CreateUserResp struct {
	Message string `thrift:"message,1" frugal:"1,default,string" json:"message"`
	Code    int64  `thrift:"code,2" frugal:"2,default,i64" json:"code"`
}

func NewCreateUserResp() *CreateUserResp {
	return &CreateUserResp{}
}

func (p *CreateUserResp) InitDefault() {
}

func (p *CreateUserResp) GetMessage() (v string) {
	return p.Message
}

func (p *CreateUserResp) GetCode() (v int64) {
	return p.Code
}
func (p *CreateUserResp) SetMessage(val string) {
	p.Message = val
}
func (p *CreateUserResp) SetCode(val int64) {
	p.Code = val
}

func (p *CreateUserResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateUserResp(%+v)", *p)
}

var fieldIDToName_CreateUserResp = map[int16]string{
	1: "message",
	2: "code",
}

type LoginUserReq struct {
	Title       string `thrift:"title,1,required" frugal:"1,required,string" json:"title"`
	SendSmsCode string `thrift:"SendSmsCode,2,required" frugal:"2,required,string" json:"SendSmsCode"`
}

func NewLoginUserReq() *LoginUserReq {
	return &LoginUserReq{}
}

func (p *LoginUserReq) InitDefault() {
}

func (p *LoginUserReq) GetTitle() (v string) {
	return p.Title
}

func (p *LoginUserReq) GetSendSmsCode() (v string) {
	return p.SendSmsCode
}
func (p *LoginUserReq) SetTitle(val string) {
	p.Title = val
}
func (p *LoginUserReq) SetSendSmsCode(val string) {
	p.SendSmsCode = val
}

func (p *LoginUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginUserReq(%+v)", *p)
}

var fieldIDToName_LoginUserReq = map[int16]string{
	1: "title",
	2: "SendSmsCode",
}

type LoginUserResp struct {
	Message string `thrift:"message,1" frugal:"1,default,string" json:"message"`
	Code    int64  `thrift:"code,2" frugal:"2,default,i64" json:"code"`
	Uid     uint64  `thrift:"Uid,3" frugal:"3,default,i64" json:"Uid"`
}

func NewLoginUserResp() *LoginUserResp {
	return &LoginUserResp{}
}

func (p *LoginUserResp) InitDefault() {
}

func (p *LoginUserResp) GetMessage() (v string) {
	return p.Message
}

func (p *LoginUserResp) GetCode() (v int64) {
	return p.Code
}

func (p *LoginUserResp) GetUid() (v uint64) {
	return p.Uid
}
func (p *LoginUserResp) SetMessage(val string) {
	p.Message = val
}
func (p *LoginUserResp) SetCode(val int64) {
	p.Code = val
}
func (p *LoginUserResp) SetUid(val uint64) {
	p.Uid = val
}

func (p *LoginUserResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginUserResp(%+v)", *p)
}

var fieldIDToName_LoginUserResp = map[int16]string{
	1: "message",
	2: "code",
	3: "Uid",
}

type User interface {
	CreateUser(ctx context.Context, req *CreateUserReq) (r *CreateUserResp, err error)

	LoginUser(ctx context.Context, req *LoginUserReq) (r *LoginUserResp, err error)
}

type UserCreateUserArgs struct {
	Req *CreateUserReq `thrift:"req,1" frugal:"1,default,CreateUserReq" json:"req"`
}

func NewUserCreateUserArgs() *UserCreateUserArgs {
	return &UserCreateUserArgs{}
}

func (p *UserCreateUserArgs) InitDefault() {
}

var UserCreateUserArgs_Req_DEFAULT *CreateUserReq

func (p *UserCreateUserArgs) GetReq() (v *CreateUserReq) {
	if !p.IsSetReq() {
		return UserCreateUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserCreateUserArgs) SetReq(val *CreateUserReq) {
	p.Req = val
}

func (p *UserCreateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserCreateUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserCreateUserArgs(%+v)", *p)
}

var fieldIDToName_UserCreateUserArgs = map[int16]string{
	1: "req",
}

type UserCreateUserResult struct {
	Success *CreateUserResp `thrift:"success,0,optional" frugal:"0,optional,CreateUserResp" json:"success,omitempty"`
}

func NewUserCreateUserResult() *UserCreateUserResult {
	return &UserCreateUserResult{}
}

func (p *UserCreateUserResult) InitDefault() {
}

var UserCreateUserResult_Success_DEFAULT *CreateUserResp

func (p *UserCreateUserResult) GetSuccess() (v *CreateUserResp) {
	if !p.IsSetSuccess() {
		return UserCreateUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserCreateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateUserResp)
}

func (p *UserCreateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserCreateUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserCreateUserResult(%+v)", *p)
}

var fieldIDToName_UserCreateUserResult = map[int16]string{
	0: "success",
}

type UserLoginUserArgs struct {
	Req *LoginUserReq `thrift:"req,1" frugal:"1,default,LoginUserReq" json:"req"`
}

func NewUserLoginUserArgs() *UserLoginUserArgs {
	return &UserLoginUserArgs{}
}

func (p *UserLoginUserArgs) InitDefault() {
}

var UserLoginUserArgs_Req_DEFAULT *LoginUserReq

func (p *UserLoginUserArgs) GetReq() (v *LoginUserReq) {
	if !p.IsSetReq() {
		return UserLoginUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserLoginUserArgs) SetReq(val *LoginUserReq) {
	p.Req = val
}

func (p *UserLoginUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserLoginUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserLoginUserArgs(%+v)", *p)
}

var fieldIDToName_UserLoginUserArgs = map[int16]string{
	1: "req",
}

type UserLoginUserResult struct {
	Success *LoginUserResp `thrift:"success,0,optional" frugal:"0,optional,LoginUserResp" json:"success,omitempty"`
}

func NewUserLoginUserResult() *UserLoginUserResult {
	return &UserLoginUserResult{}
}

func (p *UserLoginUserResult) InitDefault() {
}

var UserLoginUserResult_Success_DEFAULT *LoginUserResp

func (p *UserLoginUserResult) GetSuccess() (v *LoginUserResp) {
	if !p.IsSetSuccess() {
		return UserLoginUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserLoginUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginUserResp)
}

func (p *UserLoginUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserLoginUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserLoginUserResult(%+v)", *p)
}

var fieldIDToName_UserLoginUserResult = map[int16]string{
	0: "success",
}
